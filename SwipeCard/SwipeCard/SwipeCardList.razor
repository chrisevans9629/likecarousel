@inject IJSRuntime js
@implements IAsyncDisposable
@typeparam IItem

<div id="swipeboard">
    @foreach (var item in Cards)
    {
        <div class="swipecard">
            @ChildContent(item)
        </div>
    }
</div>

@code {

    [Parameter]
    public RenderFragment<IItem> ChildContent { get; set; }

    [Parameter]
    public Action<SwipeAction<IItem>> OnSwiped { get; set; }

    [Parameter]
    public List<IItem> Cards { get; set; } = new List<IItem>();

    [Parameter]
    public EventCallback<List<IItem>> CardsChanged { get; set; }

    private SwipeJsInterop interlop;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interlop = new SwipeJsInterop(js);
            await interlop.Start();

            interlop.OnSwipe += Swiped;
        }
        await interlop.Handle();
        await base.OnAfterRenderAsync(firstRender);
    }

    public async void Swiped(object sender, int dir)
    {
        var card = Cards.Last();
        Cards.Remove(card);
        await CardsChanged.InvokeAsync(Cards);
        OnSwiped?.Invoke(new SwipeAction<IItem>((SwipeDirection)dir, card));
        StateHasChanged();
    }

    public async void AddCard(IItem item)
    {
        Cards.Add(item);
        interlop.CardAdded();
        await CardsChanged.InvokeAsync(Cards);
    }

    public async ValueTask DisposeAsync()
    {
        await interlop.DisposeAsync();
    }

}
